"use strict";angular.module("homeMonitor",["ngAnimate","ngAria","ngCookies","ngMessages","ngResource","ngRoute","ngSanitize","ngTouch","ardyhServices","mockServices","nvd3"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/settings",{templateUrl:"views/settings.html",controller:"SettingsCtrl",controllerAs:"settings"}).otherwise({redirectTo:"/"})}]),angular.module("homeMonitor").controller("MainCtrl",["$scope","$ardyh",function(a,b){a.page="main",a.messages=[],a.wtf={data:null},a.groveBots=[{name:"ardyh/bots/rpi1",location:"Dinning Room",values:{}},{name:"ardyh/bots/rpi3",location:"Bloom Chamber",values:{}}],a.rpi1={values:b.bots.rpi1.values}}]),angular.module("homeMonitor").controller("SettingsCtrl",["$scope",function(a){a.page="settings"}]),angular.module("ardyhServices",[]).service("$ardyh",["$rootScope",function(a){console.log("[ardyhServices]");var b=this,c="192.168.0.105:9093",d="ws://"+c+"/ws";b.dtFormat="hh:mm:ss tt, ddd MMM dd, yyyy",console.log("opening socket connection to "+d),b.socket=new WebSocket(d),b.socket.onopen=function(){console.log("connection opened...."),a.$broadcast("ardyh-onopen");var c={text:"Hello from the browser"},d=JSON.stringify(c);b.socket.send(d)},b.socket.onmessage=function(b){var c=JSON.parse(b.data);console.log("['onmessage'] ",b),a.$broadcast("ardyh-onmessage",c)},b.socket.onclose=function(){console.log("The connection has been closed."),a.$broadcast("ardyh-onclose")},b.socket.onerror=function(b){console.log("The was an error.",b),a.$broadcast("ardyh-onerror",b)},b.send=function(a){1===b.socket.readyState?b.socket.send(JSON.stringify(a)):(console.log("Could not send message, ready state = "+b.socket.readyState),3===b.socket.readyState&&(console.log("I should reconnect here."),$timeout(function(){b.init(b.botName)},5e3)))},b.sendCommand=function(a,c){c=c||{},b.send({command:a,kwargs:c})},b.bots={},b.bots.rpi1={botName:"ardyh/bots/rpi1",values:[]},b.newValueCallback=function(a,c){var d={};d.temp=c.temp,d.humidity=c.humidity,d.light=c.light||c.lux,d.timestamp=new Date(c.timestamp).toString(b.dtFormat);var e={timestamp:d.timestamp,data:d};b.bots[a].values.push(e)}}]),angular.module("mockServices",[]).service("$mockArdyh",["$rootScope","$interval",function(a,b){window.setInterval(function(){data={temp:Math.random().toFixed(2),humidity:(100*Math.random()).toFixed(2),light:(1e3*Math.random()).toFixed(2)},a.$broadcast("ardyh-onmessage",data)},1e3)}]),angular.module("homeMonitor").directive("grovebotPanel",["$rootScope","$ardyh",function(a,b){return{templateUrl:"views/directives/grovebot-panel.html",restrict:"EA",scope:{botName:"=",values:"=",location:"="},link:function(c,d,e){c.units={temp:"f"},a.$on("ardyh-onmessage",function(a,b){console.log("[ardyh-onmessage]",b),b.topic===c.botName&&(c.$apply(function(){c.values=b.payload}),console.log(c.messages))}),c.celsius2fahrenheit=function(a){return 1.8*a+32},c.shutdown=function(a){console.log("[grovebotPanel.shutdown()]"),b.sendCommand("shutdown",{botName:a})},c.restart=function(a){console.log("[grovebotPanel.restart()]"),b.sendCommand("restart",{botName:a})}}}}]),angular.module("homeMonitor").directive("botGraphs",["$rootScope",function(a){return{scope:{botName:"=",values:"=",showFilters:"=?"},controller:["$scope",function(b){b.dtFormat="hh:mm:ss tt, ddd MMM dd, yyyy",a.$on("ardyh-onmessage",function(a,c){console.log("[botGraphs controller ardyh-onmessage]",c),c.topic===b.botName&&b.newValueCallback("rpi1",c.payload)}),b.newValueCallback=function(a,c){var d={};if(d.temp=isNaN(c.temp)?null:c.temp,d.humidity=isNaN(c.humidity)?null:c.humidity,d.light=isNaN(c.light)?null:c.light,d.lux=isNaN(c.lux)?null:c.lux,d.timestamp=new Date(c.timestamp),null!==d.temp){var e=parseFloat(d.temp,10);isNaN(e)&&console.log("NaN",d.temp),b.wtf.multiChart[0].values.push({x:d.timestamp,y:e})}null!==d.humidity&&b.wtf.multiChart[1].values.push({x:d.timestamp,y:d.humidity}),null!==d.light?(console.log("[botGraphs] "+b.botName+" we have light",d.light),b.wtf.multiChart[2].values.push({x:d.timestamp,y:d.light})):null!==d.lux&&(console.log("[botGraphs] "+b.botName+" we have lux",d.lux),b.wtf.multiChart[2].values.push({x:d.timestamp,y:d.lux})),console.log("newValueCallback: ",a),console.table(b.wtf.multiChart[0].values),console.table(b.wtf.multiChart[1].values),console.table(b.wtf.multiChart[2].values)}}],templateUrl:"views/directives/bot-graphs.html",restrict:"EA",link:function(a,b,c){var d={temp:[{key:"Temp (&deg;F)",values:[]}],humidity:[{key:"Humidity",values:[]}],light:[{key:"Light",values:[]}]},e=[{key:"Temp (F)",type:"line",yAxis:1,values:[]},{key:"Humidity",type:"line",yAxis:1,values:[]},{key:"Light",type:"line",yAxis:2,values:[]}];a.multiChartOptions={chart:{type:"multiChart",height:350,margin:{top:30,right:40,bottom:50,left:40},color:d3.scale.category10().range(),transitionDuration:500,xAxis:{tickFormat:function(b){return a.xAxisTickFormatFunction()(b)}},yAxis1:{tickFormat:function(a){return d3.format(",.1f")(a)}},yDomain1:[0,100],yAxis2:{tickFormat:function(a){return d3.format(",.1f")(a)}}}},a.graphs=d,a.wtf={multiChart:e},a.tempColor=function(){return function(a,b){var c="#408E2F";return c}},a.xAxisTickFormatFunction=function(){return function(a){return new Date(a).toString("ddd hh:mmt")}},a.timeFilterCallback=function(b){a.timestampFilter=b;var c=new Date,d=b.split("-")[1],e=c.addDays(-parseInt(d,10)).addHours(-7);console.log("then: ",e.toISOString());({timestamp_gte:e.toISOString()})},a.timeFilterCallback("last-3-days")}}}]).directive("changeDirection",["$sensorValues",function(a){return{scope:{previous:"=",current:"="},templateUrl:"views/partials/change-direction.html",restrict:"EA",link:function(a,b,c){}}}]),angular.module("homeMonitor").run(["$templateCache",function(a){a.put("views/about.html","<p>This is the about view.</p>\n"),a.put("views/directives/bot-graphs.html",'<div class="bot-graphs">\n  <div ng-if="showFilters" class="flex-container">\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'last-7-days\'}" ng-click="timeFilterCallback(\'last-7-days\')">last week</button>\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'last-3-days\'}" ng-click="timeFilterCallback(\'last-3-days\')">last 3 days</button>\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'last-1-days\'}" ng-click="timeFilterCallback(\'last-1-days\')">last 24</button>\n  </div>\n</div>\n\n<nvd3 options="multiChartOptions" data="wtf.multiChart" api="api"></nvd3>\n'),a.put("views/directives/grovebot-panel.html",'\n<h3>\n    {{ location }} <small>{{botName}}</small>\n    <span class="right">\n        <i class="glyphicon glyphicon-remove-circle" ng-click="shutdown(botName)"></i>\n        <i class="glyphicon glyphicon-repeat" ng-click="restart(botName)"></i>\n    </span>\n</h3>\n<span class="hidden-xs">temp </span><span class="large-stat" ng-show="units.temp === \'c\'">{{values.temp | number: 1}} &deg;C</span>\n<span class="large-stat" ng-show="units.temp === \'f\'">{{celsius2fahrenheit(values.temp) | number: 1}}&degF</span>\n\n\n&nbsp;&nbsp;<span class="hidden-xs">humid </span><span class="item item-text-wrap large-stat">\n    {{values.humidity | number: 1}}%\n</span>\n\n&nbsp;&nbsp;<span class="hidden-xs">light </span><span class="item item-text-wrap large-stat">\n    {{values.light | number: 0}} </span>\n</span>\n\n&nbsp;&nbsp;<span class="hidden-xs">lux </span><span class="item item-text-wrap large-stat">\n    {{values.lux | number: 1}} </span>\n</span>\n<div>\n    <small>Last updated {{values.timestamp}}</small>\n</div>\n\n\n'),a.put("views/main.html",'<div class="row">\n    <div class="col-lg-6" ng-repeat="bot in groveBots track by $index">\n        <div class="panel panel-default">\n            <div class="panel-heading">\n                <div grovebot-panel bot-name="bot.name" location="bot.location" values="bot.values"></div>\n            </div>\n            <div class="panel-body">\n                <div bot-graphs bot-name="bot.name" values="rpi1.values" show-filters="false" ></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n')}]);