"use strict";angular.module("homeMonitor",["ngAnimate","ngAria","ngCookies","ngMessages","ngResource","ngRoute","ngSanitize","ngTouch","ardyhServices","mockServices","nvd3"]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",controllerAs:"main"}).when("/settings",{templateUrl:"views/settings.html",controller:"SettingsCtrl",controllerAs:"settings"}).otherwise({redirectTo:"/"})}]),angular.module("homeMonitor").controller("MainCtrl",["$scope","$ardyh",function(a,b){a.page="main",a.messages=[],a.wtf={data:null},a.groveBots=[{name:"ardyh/bots/rpi2",location:"Dinning Room",values:{}},{name:"ardyh/bots/rpi3",location:"Dinning Room",values:{}},{name:"ardyh/bots/rpi1",location:"Bloom Chamber",values:{}}],a.rpi1={values:b.bots.rpi1.values}}]),angular.module("homeMonitor").controller("SettingsCtrl",["$scope",function(a){a.page="settings"}]),angular.module("ardyhServices",[]).service("$ardyh",["$rootScope","$q","$http",function(a,b,c){console.log("[ardyhServices]");var d=this,e="192.168.0.105:9093",f="ws://"+e+"/ws";d.dtFormat="hh:mm:ss tt, ddd MMM dd, yyyy",console.log("opening socket connection to "+f+"?homeMonitor"),d.socket=new WebSocket(f),d.socket.onopen=function(){console.log("connection opened...."),a.$broadcast("ardyh-onopen");var b={text:"Hello from the browser"},c=JSON.stringify(b);d.socket.send(c)},d.socket.onmessage=function(b){try{var c=JSON.parse(b.data)}catch(d){console.log("['onmessage'] Could parse, gonna try replacing NaN's",b);var e=b.data.replace(/NaN/g,"null"),c=JSON.parse(e)}a.$broadcast("ardyh-onmessage",c)},d.socket.onclose=function(){console.log("The connection has been closed."),a.$broadcast("ardyh-onclose")},d.socket.onerror=function(b){console.log("The was an error.",b),a.$broadcast("ardyh-onerror",b)},d.send=function(a){1===d.socket.readyState?d.socket.send(JSON.stringify(a)):(console.log("Could not send message, ready state = "+d.socket.readyState),3===d.socket.readyState&&(console.log("I should reconnect here."),$timeout(function(){d.init(d.botName)},5e3)))},d.sendCommand=function(a,b){b=b||{},d.send({command:a,kwargs:b})},d.bots={},d.bots.rpi1={botName:"ardyh/bots/rpi1",values:[]},d.fetchValues=function(a,d,f){var g=b.defer();a=angular.copy(a).replace(new RegExp("/","g"),".");var h="http://"+e+"/api/sensors/"+a;return h+=f?"?end="+f:"?end=-120",d&&(h+="&start="+d),c.get(h).then(function(a,b){g.resolve(a.data,b)},function(a,b){console.log(b),console.log(a),g.reject(a,b)}),g.promise}}]),angular.module("mockServices",[]).service("$mockArdyh",["$rootScope","$interval",function(a,b){window.setInterval(function(){data={temp:Math.random().toFixed(2),humidity:(100*Math.random()).toFixed(2),light:(1e3*Math.random()).toFixed(2)},a.$broadcast("ardyh-onmessage",data)},1e3)}]),angular.module("homeMonitor").directive("grovebotPanel",["$rootScope","$ardyh",function(a,b){return{templateUrl:"views/directives/grovebot-panel.html",restrict:"EA",scope:{botName:"=",values:"=",location:"="},link:function(c,d,e){c.units={temp:"f"},a.$on("ardyh-onmessage",function(a,b){b.topic===c.botName&&c.$apply(function(){c.values=b.payload})}),c.celsius2fahrenheit=function(a){return 1.8*a+32},c.shutdown=function(a){console.log("[grovebotPanel.shutdown()]"),b.sendCommand("shutdown",{botName:a})},c.restart=function(a){console.log("[grovebotPanel.restart()]"),b.sendCommand("restart",{botName:a})}}}}]),angular.module("homeMonitor").directive("botGraphs",["$rootScope","$ardyh",function(a,b){return{scope:{botName:"=",values:"=",showFilters:"=?"},controller:["$scope","$ardyh",function(b,c){b.dtFormat="hh:mm:ss tt, ddd MMM dd, yyyy",b.onMessageListner=null,b.onMessageCallback=function(a,c){c.topic===b.botName&&b.newValueCallback(c.payload)},b.fetchValues=function(d){c.fetchValues(b.botName,d).then(function(c,d){b.onMessageListener&&(b.onMessageListener(),b.onMessageListerner=null);var e=c.results;b.numValues=e.length,b.start=1e3*e[0][0],b.end=1e3*e[b.numValues-1][0],b.loadValues(e),b.onMessageListener||(b.onMessageListener=a.$on("ardyh-onmessage",b.onMessageCallback))},function(a,b){console.log("fail")})},b.loadValues=function(a){b.wtf.multiChart=angular.copy(b.emptyMultiChart);var c;angular.forEach(a,function(a){c={temp:a[1]||null,humidity:a[2]||null,light:a[3]||null,lux:a[4]||null,timestamp:1e3*a[0]},b.newValueCallback(c)}),b.wtf.multiChartOptions.chart.xDomain=[b.start,b.end],b.wtf.multiChartOptions.chart.forceX=[b.start,b.end],b.api.refresh()},b.newValueCallback=function(a){var c={};if(c.temp=isNaN(a.temp)?null:a.temp,c.humidity=isNaN(a.humidity)?null:a.humidity,c.light=isNaN(a.light)?null:a.light,c.lux=isNaN(a.lux)?null:a.lux,c.timestamp=new Date(a.timestamp),null!==c.temp){var d=parseFloat(c.temp,10);d=1.8*d+32,isNaN(d)&&console.log("NaN",c.temp),b.wtf.multiChart[0].values.push({x:c.timestamp,y:d})}null!==c.humidity&&b.wtf.multiChart[1].values.push({x:c.timestamp,y:c.humidity}),null!==c.light?b.wtf.multiChart[2].values.push({x:c.timestamp,y:c.light}):null!==c.lux&&b.wtf.multiChart[2].values.push({x:c.timestamp,y:c.lux}),console.log("[newValueCallback()] added newVal")}}],templateUrl:"views/directives/bot-graphs.html",restrict:"EA",link:function(a,b,c){var d={temp:[{key:"Temp (&deg;F)",values:[]}],humidity:[{key:"Humidity",values:[]}],light:[{key:"Light",values:[]}]};a.emptyMultiChart=[{key:"Temp (F)",type:"line",yAxis:1,values:[]},{key:"Humidity",type:"line",yAxis:1,values:[]},{key:"Light",type:"line",yAxis:2,values:[]}],a.wtf={},a.config={refreshDataOnly:!0,deepWatchOptions:!0,deepWatchData:!0},a.wtf.multiChartOptions={chart:{type:"multiChart",height:350,margin:{top:30,right:40,bottom:50,left:40},color:d3.scale.category10().range(),transitionDuration:500,interpolate:"linear",xScale:d3.time.scale(),xDomain:[1456802842e3,1457321265e3],forceX:[1456802842e3,1457321265e3],xAxis:{showMaxMin:!0,tickFormat:function(b){return a.xAxisTickFormatFunction()(b)}},xRange:null,yAxis1:{tickFormat:function(a){return d3.format(",.1f")(a)}},yDomain1:[0,100],yAxis2:{tickFormat:function(a){return d3.format(",.1f")(a)}}}},a.graphs=d,a.wtf.multiChart=a.emptyMultiChart,a.tempColor=function(){return function(a,b){var c="#408E2F";return c}},a.xAxisTickFormatFunction=function(){return function(a){return new Date(a).toString("ddd hh:mmt")}},a.timeFilterCallback=function(b){a.timestampFilter=b;new Date;if("recent"===b)var c=-21600;else var d=b.split("-")[1],c=24*-d*60*60;a.fetchValues(c)},a.timeFilterCallback("recent")}}}]).directive("changeDirection",["$sensorValues",function(a){return{scope:{previous:"=",current:"="},templateUrl:"views/partials/change-direction.html",restrict:"EA",link:function(a,b,c){}}}]),angular.module("homeMonitor").run(["$templateCache",function(a){a.put("views/about.html","<p>This is the about view.</p>\n"),a.put("views/directives/bot-graphs.html",'<div class="bot-graphs">\n  <div ng-if="true" class="flex-container">\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'last-7-days\'}" ng-click="timeFilterCallback(\'last-7-days\')">last week</button>\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'last-3-days\'}" ng-click="timeFilterCallback(\'last-3-days\')">last 3 days</button>\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'last-1-days\'}" ng-click="timeFilterCallback(\'last-1-days\')">last 24</button>\n    <button class="btn" ng-class="{\'btn-success\':timestampFilter == \'recent\'}" ng-click="timeFilterCallback(\'recent\')">Last 6 hrs</button>\n  </div>\n  <div class="">Showing {{ numValues }} entries, {{ start | date : \'medium\' }} ({{start.valueOf()}}) through {{ end | date : \'medium\' }} ({{start.valueOf()}})</div>\n\n</div>\n\n<nvd3 options="wtf.multiChartOptions" data="wtf.multiChart" config="config" api="api"></nvd3>\n'),a.put("views/directives/grovebot-panel.html",'\n<h3>\n    {{ location }} <small>{{botName}}</small>\n    <span class="right">\n        <i class="glyphicon glyphicon-remove-circle" ng-click="shutdown(botName)"></i>\n        <i class="glyphicon glyphicon-repeat" ng-click="restart(botName)"></i>\n    </span>\n</h3>\n<span class="hidden-xs">temp </span><span class="large-stat" ng-show="units.temp === \'c\'">{{values.temp | number: 1}} &deg;C</span>\n<span class="large-stat" ng-show="units.temp === \'f\'">{{celsius2fahrenheit(values.temp) | number: 1}}&degF</span>\n\n\n&nbsp;&nbsp;<span class="hidden-xs">humid </span><span class="item item-text-wrap large-stat">\n    {{values.humidity | number: 1}}%\n</span>\n\n&nbsp;&nbsp;<span class="hidden-xs">light </span><span class="item item-text-wrap large-stat">\n    {{values.light | number: 0}} </span>\n</span>\n\n&nbsp;&nbsp;<span class="hidden-xs">lux </span><span class="item item-text-wrap large-stat">\n    {{values.lux | number: 1}} </span>\n</span>\n<div>\n    <small>Last updated {{values.timestamp}}</small>\n</div>\n\n\n'),a.put("views/main.html",'<div class="row">\n    <div class="col-lg-6" ng-repeat="bot in groveBots track by $index">\n        <div class="panel panel-default">\n            <div class="panel-heading">\n                <div grovebot-panel bot-name="bot.name" location="bot.location" values="bot.values"></div>\n            </div>\n            <div class="panel-body">\n                <div bot-graphs bot-name="bot.name" values="rpi1.values" show-filters="false"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n')}]);